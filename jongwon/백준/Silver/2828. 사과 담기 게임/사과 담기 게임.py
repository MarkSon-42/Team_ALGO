# 바구니 배열만 만들어서 크기 만큼 만들었고, 바구니 배열에 바구니 크기 까지의 숫자를 1부터 넣고 바구니를 구성하였다.
# 바구니 이동 방식은 리스트 컴프리헨션을 통해 바구니보다 사과가 오른쪽에서 떨어진다면 바구니 안의 정수 들을 1씩 증가시키면서 사과를 받을 수 있는 곳까지 이동시키며 거리를 반환하고,
# 바구니보다 사과가 왼쪽에 떨어지면 바구니 안의 숫자 들을 1씩 감소 시키면서 확인하고, 받을 수 있는 곳 까지 가서 거리를 반환한다.

# n과 m을 입력으로 받아서 변수에 할당
n, m = map(int, input().split())

# 초기 사과의 개수를 입력으로 받아 변수에 할당
apple = int(input())

# 바구니를 초기화하여 1부터 m까지의 숫자로 채움
basket = [j + 1 for j in range(m)]

# 이동 횟수를 저장하는 변수를 초기화
move = 0

# 입력된 사과 개수만큼 반복
for i in range(apple):
    # 현재 들어온 사과의 번호를 입력으로 받음
    drop = int(input())
    
    # 들어온 사과가 이미 바구니에 있는 경우, 다음 사과로 넘어감
    if drop in basket:
        continue
    else:
        # 들어온 사과가 바구니에 없는 경우, 사과를 넣기 위해 이동
        while True:
            # 가장 오른쪽 끝의 바구니 번호가 들어온 사과 번호보다 작으면
            # 모든 바구니를 오른쪽으로 한 칸씩 이동하고 이동 횟수 증가
            if basket[-1] < drop:
                basket = [k + 1 for k in basket]
                move += 1
            else:
                # 들어온 사과 번호보다 크면
                # 모든 바구니를 왼쪽으로 한 칸씩 이동하고 이동 횟수 증가
                basket = [k - 1 for k in basket]
                move += 1
            
            # 들어온 사과 번호가 바구니에 들어간 경우, 반복문 종료
            if drop in basket:
                break

# 최종적으로 이동 횟수를 출력
print(move)