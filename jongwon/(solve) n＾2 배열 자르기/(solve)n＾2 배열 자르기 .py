# 1차 실패에서 시간 복잡도를 줄이기 위해 2차원 배열을 생성하여 구현하지 말고 left, right 범위 내에서의 1차원 배열만을 생성하여 필요한 부분에서 칸 안의 값만 반환하여 구현
# 1차 실패에서 i,j의 값중 큰 값이 그 칸의 값이 된다는 것을 알게 되었고 일차원 배열에서도 범위내의 칸의 행과 열의 값을 구하고 그 값들중 큰 값을 칸의 값으로 결정하여 일차원 배열을 구성하여 결과 반환

# 2차원 배열을 생성하지 않고 원하는 범위에 직접 접근하여 계산하므로 시간 복잡도 : O(n^2 + right - left)

def solution(n, left, right):
    result = []
    
    for i in range(left, right + 1): # 1차원 배열에서의 인덱스를 2차원 배열의 행과 열로 변환
        row = i // n # 행 번호 : i를 배열의 크기 n으로 나눈 몫 (i가 몇 번째 행에 위치)
        col = i % n # 열 번호 :  i를 배열의 크기 n으로 나눈 나머지 (i가 해당 행에서 몇 번째 열에 위치)
         
        max_val = max(row, col)
        value = max_val + 1 # 인덱스로 구하기 때문에 값에 1 더해주기
        
        result.append(value)
    
    return result



